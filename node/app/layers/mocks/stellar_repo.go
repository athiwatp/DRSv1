// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/layers/repositories/stellar/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	horizon "github.com/stellar/go/protocols/horizon"
	entities "gitlab.com/velo-labs/cen/node/app/entities"
	reflect "reflect"
)

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetAccount mocks base method
func (m *MockRepo) GetAccount(stellarAddress string) (*horizon.Account, error) {
	ret := m.ctrl.Call(m, "GetAccount", stellarAddress)
	ret0, _ := ret[0].(*horizon.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockRepoMockRecorder) GetAccount(stellarAddress interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockRepo)(nil).GetAccount), stellarAddress)
}

// GetAccounts mocks base method
func (m *MockRepo) GetAccounts(stellarAddresses ...string) ([]horizon.Account, error) {
	varargs := []interface{}{}
	for _, a := range stellarAddresses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccounts", varargs...)
	ret0, _ := ret[0].([]horizon.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts
func (mr *MockRepoMockRecorder) GetAccounts(stellarAddresses ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockRepo)(nil).GetAccounts), stellarAddresses...)
}

// GetAccountData mocks base method
func (m *MockRepo) GetAccountData(stellarAddress string) (map[string]string, error) {
	ret := m.ctrl.Call(m, "GetAccountData", stellarAddress)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountData indicates an expected call of GetAccountData
func (mr *MockRepoMockRecorder) GetAccountData(stellarAddress interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountData", reflect.TypeOf((*MockRepo)(nil).GetAccountData), stellarAddress)
}

// GetAccountDecodedData mocks base method
func (m *MockRepo) GetAccountDecodedData(stellarAddress string) (map[string]string, error) {
	ret := m.ctrl.Call(m, "GetAccountDecodedData", stellarAddress)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDecodedData indicates an expected call of GetAccountDecodedData
func (mr *MockRepoMockRecorder) GetAccountDecodedData(stellarAddress interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDecodedData", reflect.TypeOf((*MockRepo)(nil).GetAccountDecodedData), stellarAddress)
}

// GetAccountDecodedDataByKey mocks base method
func (m *MockRepo) GetAccountDecodedDataByKey(stellarAddress, key string) (string, error) {
	ret := m.ctrl.Call(m, "GetAccountDecodedDataByKey", stellarAddress, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDecodedDataByKey indicates an expected call of GetAccountDecodedDataByKey
func (mr *MockRepoMockRecorder) GetAccountDecodedDataByKey(stellarAddress, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDecodedDataByKey", reflect.TypeOf((*MockRepo)(nil).GetAccountDecodedDataByKey), stellarAddress, key)
}

// GetDrsAccountData mocks base method
func (m *MockRepo) GetDrsAccountData() (*entities.DrsAccountData, error) {
	ret := m.ctrl.Call(m, "GetDrsAccountData")
	ret0, _ := ret[0].(*entities.DrsAccountData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrsAccountData indicates an expected call of GetDrsAccountData
func (mr *MockRepoMockRecorder) GetDrsAccountData() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrsAccountData", reflect.TypeOf((*MockRepo)(nil).GetDrsAccountData))
}

// GetMedianPriceFromPriceAccount mocks base method
func (m *MockRepo) GetMedianPriceFromPriceAccount(priceAccountAddress string) (decimal.Decimal, error) {
	ret := m.ctrl.Call(m, "GetMedianPriceFromPriceAccount", priceAccountAddress)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMedianPriceFromPriceAccount indicates an expected call of GetMedianPriceFromPriceAccount
func (mr *MockRepoMockRecorder) GetMedianPriceFromPriceAccount(priceAccountAddress interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMedianPriceFromPriceAccount", reflect.TypeOf((*MockRepo)(nil).GetMedianPriceFromPriceAccount), priceAccountAddress)
}

// SubmitTransaction mocks base method
func (m *MockRepo) SubmitTransaction(txB64 string) (*horizon.TransactionSuccess, error) {
	ret := m.ctrl.Call(m, "SubmitTransaction", txB64)
	ret0, _ := ret[0].(*horizon.TransactionSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransaction indicates an expected call of SubmitTransaction
func (mr *MockRepoMockRecorder) SubmitTransaction(txB64 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransaction", reflect.TypeOf((*MockRepo)(nil).SubmitTransaction), txB64)
}

// GetAsset mocks base method
func (m *MockRepo) GetAsset(getAssetInput entities.GetAssetInput) (*horizon.AssetsPage, error) {
	ret := m.ctrl.Call(m, "GetAsset", getAssetInput)
	ret0, _ := ret[0].(*horizon.AssetsPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset
func (mr *MockRepoMockRecorder) GetAsset(getAssetInput interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockRepo)(nil).GetAsset), getAssetInput)
}
