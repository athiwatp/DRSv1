// Code generated by MockGen. DO NOT EDIT.
// Source: ./layers/logic/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	keypair "github.com/stellar/go/keypair"
	entity "gitlab.com/velo-labs/cen/cmd/gvel/entity"
	reflect "reflect"
)

// MockLogic is a mock of Logic interface
type MockLogic struct {
	ctrl     *gomock.Controller
	recorder *MockLogicMockRecorder
}

// MockLogicMockRecorder is the mock recorder for MockLogic
type MockLogicMockRecorder struct {
	mock *MockLogic
}

// NewMockLogic creates a new mock instance
func NewMockLogic(ctrl *gomock.Controller) *MockLogic {
	mock := &MockLogic{ctrl: ctrl}
	mock.recorder = &MockLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogic) EXPECT() *MockLogicMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockLogic) Init(configFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", configFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockLogicMockRecorder) Init(configFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLogic)(nil).Init), configFilePath)
}

// CreateAccount mocks base method
func (m *MockLogic) CreateAccount(passphrase string) (*keypair.Full, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", passphrase)
	ret0, _ := ret[0].(*keypair.Full)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockLogicMockRecorder) CreateAccount(passphrase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockLogic)(nil).CreateAccount), passphrase)
}

// ListAccount mocks base method
func (m *MockLogic) ListAccount() (*[]entity.StellarAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccount")
	ret0, _ := ret[0].(*[]entity.StellarAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccount indicates an expected call of ListAccount
func (mr *MockLogicMockRecorder) ListAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccount", reflect.TypeOf((*MockLogic)(nil).ListAccount))
}
