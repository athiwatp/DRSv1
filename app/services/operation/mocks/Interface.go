// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Mint provides a mock function with given fields: amount, assetName, issuerAddress, distributorAddress
func (_m *Interface) Mint(amount string, assetName string, issuerAddress string, distributorAddress string) (string, error) {
	ret := _m.Called(amount, assetName, issuerAddress, distributorAddress)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = rf(amount, assetName, issuerAddress, distributorAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(amount, assetName, issuerAddress, distributorAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Setup provides a mock function with given fields: peggedValue, peggedCurrency, assetName, creditOwnerAddress
func (_m *Interface) Setup(peggedValue string, peggedCurrency string, assetName string, creditOwnerAddress string) (string, string, string, error) {
	ret := _m.Called(peggedValue, peggedCurrency, assetName, creditOwnerAddress)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = rf(peggedValue, peggedCurrency, assetName, creditOwnerAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, string, string) string); ok {
		r1 = rf(peggedValue, peggedCurrency, assetName, creditOwnerAddress)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, string, string, string) string); ok {
		r2 = rf(peggedValue, peggedCurrency, assetName, creditOwnerAddress)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string, string, string) error); ok {
		r3 = rf(peggedValue, peggedCurrency, assetName, creditOwnerAddress)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
